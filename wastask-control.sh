#!/bin/bash

# WasTask Control Script
# Controla PostgreSQL e WasTask de forma simples

POSTGRES_CONTAINER="postgres-wastask"
POSTGRES_DATA_VOLUME="wastask-data"

show_help() {
    echo "üöÄ WasTask Control Panel"
    echo ""
    echo "Comandos:"
    echo "  ./wastask-control.sh start    - Iniciar PostgreSQL"
    echo "  ./wastask-control.sh stop     - Parar PostgreSQL"
    echo "  ./wastask-control.sh status   - Ver status"
    echo "  ./wastask-control.sh restart  - Reiniciar PostgreSQL"
    echo "  ./wastask-control.sh clean    - Parar e limpar tudo"
    echo "  ./wastask-control.sh help     - Mostrar esta ajuda"
    echo ""
    echo "Ap√≥s 'start', use comandos do WasTask normalmente:"
    echo "  uv run python wastask.py db list"
    echo "  uv run python wastask.py prd analyze docs/exemplo.md"
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n√£o est√° instalado"
        exit 1
    fi
}

start_postgres() {
    echo "üöÄ Iniciando PostgreSQL para WasTask..."
    
    # Verificar se j√° est√° rodando
    if docker ps --format "table {{.Names}}" | grep -q "^${POSTGRES_CONTAINER}$"; then
        echo "‚úÖ PostgreSQL j√° est√° rodando"
        return
    fi
    
    # Verificar se container existe mas est√° parado
    if docker ps -a --format "table {{.Names}}" | grep -q "^${POSTGRES_CONTAINER}$"; then
        echo "üîÑ Reiniciando container existente..."
        docker start $POSTGRES_CONTAINER
    else
        echo "üì¶ Criando novo container PostgreSQL..."
        docker run -d \
            --name $POSTGRES_CONTAINER \
            -e POSTGRES_USER=wastask \
            -e POSTGRES_PASSWORD=wastask123 \
            -e POSTGRES_DB=wastask \
            -p 5432:5432 \
            -v $POSTGRES_DATA_VOLUME:/var/lib/postgresql/data \
            postgres:16-alpine
    fi
    
    echo "‚è≥ Aguardando PostgreSQL inicializar..."
    sleep 5
    
    # Verificar se setup inicial √© necess√°rio
    if [ ! -f ".wastask_initialized" ]; then
        echo "üîß Executando setup inicial do banco..."
        uv run python wastask.py db setup 2>/dev/null || echo "‚ö†Ô∏è Setup pode precisar ser executado manualmente"
        touch .wastask_initialized
    fi
    
    echo "‚úÖ WasTask pronto para uso!"
    echo ""
    echo "Exemplos de uso:"
    echo "  uv run python wastask.py db stats"
    echo "  uv run python wastask.py db list"
}

stop_postgres() {
    echo "üõë Parando PostgreSQL..."
    
    if docker ps --format "table {{.Names}}" | grep -q "^${POSTGRES_CONTAINER}$"; then
        docker stop $POSTGRES_CONTAINER
        echo "‚úÖ PostgreSQL parado"
    else
        echo "‚ÑπÔ∏è PostgreSQL j√° estava parado"
    fi
}

show_status() {
    echo "üìä Status do WasTask:"
    echo ""
    
    # Status do Docker
    if docker ps --format "table {{.Names}}\t{{.Status}}" | grep -q "^${POSTGRES_CONTAINER}"; then
        echo "üü¢ PostgreSQL: Rodando"
        
        # Mostrar estat√≠sticas se dispon√≠vel
        echo ""
        echo "üìà Estat√≠sticas do banco:"
        uv run python wastask.py db stats 2>/dev/null || echo "   (execute 'start' para ver estat√≠sticas)"
    else
        if docker ps -a --format "table {{.Names}}\t{{.Status}}" | grep -q "^${POSTGRES_CONTAINER}"; then
            echo "üü° PostgreSQL: Parado"
        else
            echo "‚ö´ PostgreSQL: N√£o criado"
        fi
    fi
    
    # Status dos dados
    if docker volume ls | grep -q $POSTGRES_DATA_VOLUME; then
        echo "üíæ Volume de dados: Existente"
    else
        echo "üíæ Volume de dados: N√£o criado"
    fi
    
    echo ""
    echo "üí° Use './wastask-control.sh start' para iniciar"
}

restart_postgres() {
    echo "üîÑ Reiniciando PostgreSQL..."
    stop_postgres
    sleep 2
    start_postgres
}

clean_all() {
    echo "üßπ Limpando tudo..."
    echo "‚ö†Ô∏è ATEN√á√ÉO: Isso vai remover TODOS os dados!"
    read -p "Tem certeza? (y/N): " confirm
    
    if [[ $confirm =~ ^[Yy]$ ]]; then
        echo "üõë Parando container..."
        docker stop $POSTGRES_CONTAINER 2>/dev/null || true
        
        echo "üóëÔ∏è Removendo container..."
        docker rm $POSTGRES_CONTAINER 2>/dev/null || true
        
        echo "üíæ Removendo volume de dados..."
        docker volume rm $POSTGRES_DATA_VOLUME 2>/dev/null || true
        
        echo "üßπ Removendo arquivo de inicializa√ß√£o..."
        rm -f .wastask_initialized
        
        echo "‚úÖ Limpeza conclu√≠da"
    else
        echo "‚ùå Opera√ß√£o cancelada"
    fi
}

# Main
check_docker

case "${1:-help}" in
    start)
        start_postgres
        ;;
    stop)
        stop_postgres
        ;;
    status)
        show_status
        ;;
    restart)
        restart_postgres
        ;;
    clean)
        clean_all
        ;;
    help|*)
        show_help
        ;;
esac