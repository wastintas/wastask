#!/usr/bin/env python3
"""
WasTask - Demo do Gerador Inteligente
Demonstra√ß√£o das capacidades de an√°lise e gera√ß√£o inteligente de tarefas
"""
import sys
import os
import asyncio
import uuid
import subprocess
from pathlib import Path

# Adicionar path atual
sys.path.insert(0, os.path.abspath('..'))

from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import track
import time

console = Console()

# Importar m√≥dulos
from ai_engine.intelligent_task_generator import intelligent_generator
from wastask.mock_adk import LlmAgent

class WasTaskIntelligentDemo:
    def __init__(self):
        self.usuario_id = str(uuid.uuid4())
        
        # IA Agent
        self.ia_agent = LlmAgent(
            name="intelligent_demo",
            model="wastask-intelligent",
            description="Demo do sistema inteligente"
        )
        
        # Database manager (ser√° inicializado depois)
        self.db = None
    
    def verificar_postgres(self):
        """Verificar se PostgreSQL est√° dispon√≠vel"""
        try:
            result = subprocess.run(
                ["docker", "ps", "--filter", "name=wastask-postgres", "--format", "{{.Names}}"],
                capture_output=True, text=True
            )
            return "wastask-postgres" in result.stdout
        except:
            return False
    
    def conectar_banco(self):
        """Conectar ao banco PostgreSQL"""
        try:
            from database import DatabaseManager
            
            console.print("üîå Conectando ao PostgreSQL...")
            self.db = DatabaseManager("postgresql://wastask:password@127.0.0.1:5433/wastask")
            self.db.create_tables()
            console.print("‚úÖ Conectado ao PostgreSQL!")
            return True
            
        except Exception as e:
            console.print(f"‚ùå Erro ao conectar: {e}")
            console.print("üí° Execute: docker run -d --name wastask-postgres -e POSTGRES_DB=wastask -e POSTGRES_USER=wastask -e POSTGRES_PASSWORD=password -p 5433:5432 postgres:15-alpine")
            return False
    
    def testar_analise_inteligente(self):
        """Testar an√°lise de diferentes tipos de projetos"""
        console.print("\\n[bold cyan]üß† Testando An√°lise Inteligente de Projetos[/bold cyan]")
        
        projetos_teste = [
            {
                "name": "EcoMarket - Marketplace Verde",
                "description": "Plataforma de e-commerce sustent√°vel com produtos ecol√≥gicos, sistema de pagamentos, carrinho de compras, gest√£o de estoque, dashboard administrativo e app mobile. Integra√ß√£o com AWS e Docker."
            },
            {
                "name": "MedAssist - Prontu√°rio Digital",
                "description": "Sistema de sa√∫de com telemedicina, prontu√°rio eletr√¥nico, agendamento de consultas, prescri√ß√µes digitais, conformidade LGPD, integra√ß√£o com equipamentos m√©dicos e app para pacientes."
            },
            {
                "name": "EduTech AI - Plataforma de Ensino",
                "description": "Sistema de educa√ß√£o online com intelig√™ncia artificial, machine learning para recomenda√ß√µes, videoaulas, avalia√ß√µes autom√°ticas, analytics de aprendizado e algoritmos de personaliza√ß√£o."
            }
        ]
        
        for i, projeto in enumerate(projetos_teste, 1):
            console.print(f"\\n[bold green]üìã Teste {i}: {projeto['name']}[/bold green]")
            console.print(f"[dim]{projeto['description']}[/dim]")
            
            # An√°lise
            with console.status("üîç Analisando projeto..."):
                analysis = intelligent_generator.analyze_project(projeto['name'], projeto['description'])
            
            # Mostrar an√°lise
            table = Table(title=f"üîç An√°lise: {projeto['name']}")
            table.add_column("Aspecto", style="cyan")
            table.add_column("Resultado", style="green")
            
            table.add_row("Dom√≠nio", analysis.domain.title())
            table.add_row("Complexidade", analysis.estimated_complexity)
            table.add_row("Stack T√©cnica", ", ".join(analysis.technology_stack) if analysis.technology_stack else "N√£o detectada")
            table.add_row("Req. T√©cnicos", ", ".join(analysis.technical_requirements) if analysis.technical_requirements else "B√°sicos")
            table.add_row("Req. Neg√≥cio", ", ".join(analysis.business_requirements) if analysis.business_requirements else "Gen√©ricos")
            
            console.print(table)
            
            # Gerar tarefas customizadas
            console.print(f"\\n[bold blue]ü§ñ Tarefas Geradas pela IA:[/bold blue]")
            tarefas = intelligent_generator.generate_custom_tasks(projeto['name'], projeto['description'], 8)
            
            for j, (tarefa, prioridade) in enumerate(tarefas, 1):
                priority_emoji = {
                    "CRITICAL": "üî¥",
                    "HIGH": "üü†", 
                    "MEDIUM": "üü°",
                    "LOW": "üü¢"
                }
                emoji = priority_emoji.get(prioridade.value, "‚ö™")
                console.print(f"  {j}. {emoji} {tarefa}")
            
            if i < len(projetos_teste):
                time.sleep(2)  # Pausa autom√°tica
    
    def testar_comparacao(self):
        """Comparar gera√ß√£o tradicional vs inteligente"""
        console.print("\\n[bold cyan]‚öñÔ∏è Compara√ß√£o: Templates vs IA Inteligente[/bold cyan]")
        
        projeto_teste = {
            "name": "SmartFinance - FinTech Crypto",
            "description": "Plataforma financeira com criptomoedas, blockchain, trading automatizado, machine learning para an√°lise de risco, conformidade regulat√≥ria, seguran√ßa banc√°ria e mobile banking."
        }
        
        console.print(f"\\n[bold]üìã Projeto de Teste:[/bold] {projeto_teste['name']}")
        console.print(f"[dim]{projeto_teste['description']}[/dim]")
        
        # Gera√ß√£o inteligente
        console.print("\\n[bold green]üß† Gera√ß√£o Inteligente (An√°lise + Customiza√ß√£o):[/bold green]")
        tarefas_inteligentes = intelligent_generator.generate_custom_tasks(
            projeto_teste['name'], 
            projeto_teste['description'], 
            10
        )
        
        for i, (tarefa, prioridade) in enumerate(tarefas_inteligentes, 1):
            priority_emoji = {"CRITICAL": "üî¥", "HIGH": "üü†", "MEDIUM": "üü°", "LOW": "üü¢"}
            emoji = priority_emoji.get(prioridade.value, "‚ö™")
            console.print(f"  {i}. {emoji} {tarefa}")
        
        console.print("\\n[bold blue]üìä Vantagens da Gera√ß√£o Inteligente:[/bold blue]")
        console.print("  ‚úÖ An√°lise autom√°tica do contexto")
        console.print("  ‚úÖ Detec√ß√£o de tecnologias mencionadas")
        console.print("  ‚úÖ Identifica√ß√£o de requisitos espec√≠ficos")
        console.print("  ‚úÖ Prioriza√ß√£o baseada no dom√≠nio")
        console.print("  ‚úÖ Tarefas completamente customizadas")
        console.print("  ‚úÖ Evita duplica√ß√µes e redund√¢ncias")
    
    async def salvar_projeto_inteligente(self):
        """Salvar um projeto gerado inteligentemente no banco"""
        if not self.db:
            return
        
        console.print("\\n[bold cyan]üíæ Salvando Projeto Inteligente no PostgreSQL[/bold cyan]")
        
        projeto_demo = {
            "name": "GreenTech IoT - Agricultura Inteligente",
            "description": "Sistema IoT para agricultura sustent√°vel com sensores, machine learning para predi√ß√£o de safras, dashboard web, app mobile, APIs REST, integra√ß√£o com drones, banco de dados temporal e conformidade ambiental."
        }
        
        # Criar projeto
        projeto = self.db.criar_projeto(
            projeto_demo['name'], 
            projeto_demo['description'], 
            self.usuario_id
        )
        console.print(f"‚úÖ Projeto criado: {projeto.name}")
        
        # Gerar tarefas
        tarefas_geradas = intelligent_generator.generate_custom_tasks(
            projeto_demo['name'], 
            projeto_demo['description'], 
            12
        )
        
        # Salvar no banco
        console.print("üíæ Salvando tarefas...")
        for titulo, prioridade in track(tarefas_geradas, description="Salvando..."):
            self.db.criar_tarefa(
                title=titulo,
                description=f"Tarefa gerada pelo sistema inteligente do WasTask",
                project_id=str(projeto.id),
                creator_id=self.usuario_id,
                priority=prioridade
            )
            time.sleep(0.1)
        
        console.print(f"‚úÖ {len(tarefas_geradas)} tarefas salvas no PostgreSQL!")
        
        # Estat√≠sticas
        stats = self.db.get_stats()
        console.print(f"\\nüìä Total no sistema: {stats['projetos']} projetos, {stats['tarefas']} tarefas")
    
    async def executar_demo_inteligente(self):
        """Demo completo do sistema inteligente"""
        console.print(Panel(
            "[bold blue]üß† WasTask - Demo Sistema Inteligente[/bold blue]\\n\\n"
            "[cyan]An√°lise autom√°tica e gera√ß√£o customizada de tarefas[/cyan]\\n"
            "[yellow]‚ú® Powered by AI Analysis ‚ú®[/yellow]",
            expand=False
        ))
        
        # 1. Testar an√°lise inteligente
        self.testar_analise_inteligente()
        
        # 2. Compara√ß√£o
        self.testar_comparacao()
        
        # 3. Integra√ß√£o com PostgreSQL
        if self.verificar_postgres() and self.conectar_banco():
            await self.salvar_projeto_inteligente()
        
        console.print(f"\\n[bold green]üéâ Demo do Sistema Inteligente Conclu√≠do![/bold green]")
        console.print(f"üß† Sistema analisa contexto automaticamente")
        console.print(f"‚ö° Gera tarefas completamente customizadas")
        console.print(f"üéØ Prioriza√ß√£o inteligente baseada no dom√≠nio")

async def main():
    """Fun√ß√£o principal"""
    try:
        demo = WasTaskIntelligentDemo()
        await demo.executar_demo_inteligente()
    except KeyboardInterrupt:
        console.print("\\nüëã Demo interrompido")
    except Exception as e:
        console.print(f"\\n‚ùå Erro inesperado: {e}")

if __name__ == '__main__':
    asyncio.run(main())