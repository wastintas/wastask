#!/usr/bin/env python3
"""
WasTask - Demo Simples e Funcional
Demonstra√ß√£o pr√°tica sem problemas de importa√ß√£o
"""
import sys
import os
import asyncio
import uuid
from datetime import datetime

# Adicionar path atual
sys.path.insert(0, os.path.abspath('.'))

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich.table import Table
from rich.progress import track
import time

console = Console()

# Importar apenas m√≥dulos que funcionam
from core.models import Project, Task, TaskPriority, TaskStatus
from wastask.mock_adk import LlmAgent, FunctionTool

class WasTaskDemoSimples:
    def __init__(self):
        self.usuario_id = str(uuid.uuid4())[:8]
        self.projetos = []
        self.tarefas = []
        
        # Criar agente IA simplificado
        self.ia_agent = LlmAgent(
            name="assistente_projetos",
            model="mock-gpt",
            description="Assistente especializado em gest√£o de projetos"
        )
        
    def mostrar_banner(self):
        """Mostrar banner inicial"""
        console.print(Panel(
            "[bold blue]üöÄ WasTask - Demo Interativo Simples[/bold blue]\n\n"
            "[cyan]Sistema de Gest√£o de Projetos com IA[/cyan]\n"
            "[yellow]‚ú® Vers√£o funcional e test√°vel ‚ú®[/yellow]\n"
            "[dim]Digite Ctrl+C para sair[/dim]",
            expand=False
        ))
    
    def criar_projeto_interativo(self):
        """Criar projeto com input do usu√°rio"""
        console.print("\n[bold cyan]üìã Vamos criar seu projeto![/bold cyan]")
        
        nome = Prompt.ask("üí≠ Nome do projeto", default="Meu App Incr√≠vel")
        descricao = Prompt.ask("üìù Descri√ß√£o breve", default="Um projeto revolucion√°rio que vai mudar tudo")
        
        # Efeito visual
        with console.status("[bold green]‚ú® Criando projeto..."):
            time.sleep(1)
        
        projeto = Project(
            name=nome,
            description=descricao,
            owner_id=self.usuario_id
        )
        
        self.projetos.append(projeto)
        
        console.print(f"\n‚úÖ Projeto '{nome}' criado com sucesso!")
        console.print(f"[dim]ID: {str(projeto.id)[:8]}...[/dim]")
        console.print(f"[dim]Propriet√°rio: {self.usuario_id}[/dim]")
        
        return projeto
    
    async def conversar_com_ia(self, projeto):
        """Conversa com IA sobre o projeto"""
        console.print(f"\n[bold cyan]ü§ñ Conversando sobre '{projeto.name}'[/bold cyan]")
        
        perguntas_sugeridas = [
            f"Como posso organizar melhor o projeto '{projeto.name}'?",
            "Quais s√£o as tarefas mais importantes para come√ßar?",
            "Como estimar prazos de forma realista?",
            "Que riscos devo considerar neste projeto?",
            "Como dividir o trabalho em sprints?"
        ]
        
        console.print("\n[yellow]üí¨ Escolha uma pergunta ou fa√ßa a sua:[/yellow]")
        for i, pergunta in enumerate(perguntas_sugeridas, 1):
            console.print(f"  {i}. {pergunta}")
        
        escolha = Prompt.ask(
            "\nSua pergunta (1-5 ou digite livremente)", 
            default="1"
        )
        
        if escolha.isdigit() and 1 <= int(escolha) <= 5:
            pergunta = perguntas_sugeridas[int(escolha) - 1]
        else:
            pergunta = escolha
        
        console.print(f"\n[bold]üë§ Voc√™:[/bold] {pergunta}")
        
        # Processar com IA mock
        with console.status("[bold green]üß† IA analisando..."):
            time.sleep(1.5)  # Simular processamento
            resposta = await self.ia_agent.run(pergunta)
        
        console.print(f"\n[bold blue]ü§ñ WasTask IA:[/bold blue]")
        console.print(Panel(resposta.content, border_style="blue"))
        
        # Adicionar sugest√µes baseadas no contexto
        sugestoes = [
            "Considere usar metodologia √°gil",
            "Documente os requisitos principais",
            "Defina marcos claros do projeto",
            "Estabele√ßa canais de comunica√ß√£o"
        ]
        
        console.print("\n[yellow]üí° Sugest√µes adicionais:[/yellow]")
        for sug in sugestoes:
            console.print(f"  ‚Ä¢ {sug}")
    
    def criar_plano_basico(self, projeto):
        """Criar plano b√°sico para o projeto"""
        console.print(f"\n[bold cyan]üìä Criando plano para '{projeto.name}'[/bold cyan]")
        
        # Simular an√°lise IA
        fases = [
            {"nome": "üöÄ Planejamento", "dias": 3, "tarefas": ["Definir requisitos", "Escolher tecnologias", "Criar cronograma"]},
            {"nome": "‚ö° Desenvolvimento", "dias": 14, "tarefas": ["Setup inicial", "Features principais", "Integra√ß√£o"]},
            {"nome": "üß™ Testes", "dias": 5, "tarefas": ["Testes unit√°rios", "Testes integra√ß√£o", "QA"]},
            {"nome": "üöÄ Deploy", "dias": 3, "tarefas": ["Configurar produ√ß√£o", "Deploy", "Monitoramento"]}
        ]
        
        with console.status("[bold green]üß† IA gerando plano..."):
            time.sleep(2)
        
        console.print("\n‚úÖ [bold green]Plano criado![/bold green]")
        
        # Mostrar plano em tabela
        table = Table(title=f"üìã Plano: {projeto.name}")
        table.add_column("Fase", style="cyan")
        table.add_column("Dura√ß√£o", style="yellow")
        table.add_column("Tarefas", style="green")
        table.add_column("Descri√ß√£o", style="dim")
        
        total_dias = 0
        for fase in fases:
            total_dias += fase["dias"]
            tarefas_str = ", ".join(fase["tarefas"][:2])
            if len(fase["tarefas"]) > 2:
                tarefas_str += f" (+{len(fase['tarefas'])-2} mais)"
            
            table.add_row(
                fase["nome"],
                f"{fase['dias']} dias",
                f"{len(fase['tarefas'])} itens",
                tarefas_str
            )
        
        console.print(table)
        console.print(f"\n‚è±Ô∏è  [bold]Dura√ß√£o total:[/bold] {total_dias} dias")
        console.print(f"üìÖ [bold]Estimativa:[/bold] ~{total_dias//7} semanas")
        
        return fases
    
    def criar_tarefas_automaticas(self, projeto):
        """Criar tarefas automaticamente"""
        console.print(f"\n[bold cyan]‚ö° Gerando tarefas para '{projeto.name}'[/bold cyan]")
        
        tarefas_templates = [
            ("üìã Definir escopo e objetivos", TaskPriority.HIGH),
            ("üèóÔ∏è Configurar ambiente de desenvolvimento", TaskPriority.HIGH),
            ("üé® Criar prot√≥tipos e mockups", TaskPriority.MEDIUM),
            ("üíª Implementar funcionalidades core", TaskPriority.HIGH),
            ("üîß Configurar banco de dados", TaskPriority.MEDIUM),
            ("üß™ Escrever testes automatizados", TaskPriority.MEDIUM),
            ("üì± Implementar interface usu√°rio", TaskPriority.MEDIUM),
            ("üîí Configurar seguran√ßa e autentica√ß√£o", TaskPriority.HIGH),
            ("üìä Adicionar analytics e monitoramento", TaskPriority.LOW),
            ("üìö Escrever documenta√ß√£o", TaskPriority.LOW),
            ("üöÄ Preparar para produ√ß√£o", TaskPriority.MEDIUM),
            ("üîç Revis√£o final e QA", TaskPriority.HIGH)
        ]
        
        tarefas_criadas = []
        
        for titulo, prioridade in track(tarefas_templates, description="üîÆ IA criando tarefas..."):
            tarefa = Task(
                title=titulo,
                description=f"Tarefa gerada automaticamente para o projeto {projeto.name}",
                project_id=projeto.id,
                creator_id=self.usuario_id,
                priority=prioridade
            )
            tarefas_criadas.append(tarefa)
            self.tarefas.append(tarefa)
            time.sleep(0.1)  # Efeito visual
        
        console.print(f"\n‚úÖ {len(tarefas_criadas)} tarefas criadas com sucesso!")
        
        # Mostrar estat√≠sticas
        alta = len([t for t in tarefas_criadas if t.priority == TaskPriority.HIGH])
        media = len([t for t in tarefas_criadas if t.priority == TaskPriority.MEDIUM])
        baixa = len([t for t in tarefas_criadas if t.priority == TaskPriority.LOW])
        
        console.print(f"üìä Prioridades: üî¥ {alta} alta, üü° {media} m√©dia, üü¢ {baixa} baixa")
        
        return tarefas_criadas
    
    def mostrar_tarefas_detalhadas(self, projeto):
        """Mostrar tarefas do projeto em detalhes"""
        tarefas_projeto = [t for t in self.tarefas if t.project_id == projeto.id]
        
        if not tarefas_projeto:
            console.print("üì≠ Nenhuma tarefa encontrada")
            return
        
        # Agrupar por prioridade
        por_prioridade = {
            TaskPriority.HIGH: [],
            TaskPriority.MEDIUM: [],
            TaskPriority.LOW: []
        }
        
        for tarefa in tarefas_projeto:
            por_prioridade[tarefa.priority].append(tarefa)
        
        console.print(f"\n[bold cyan]üìã Tarefas do Projeto: {projeto.name}[/bold cyan]")
        
        cores_prioridade = {
            TaskPriority.HIGH: "red",
            TaskPriority.MEDIUM: "yellow",
            TaskPriority.LOW: "green"
        }
        
        icons_prioridade = {
            TaskPriority.HIGH: "üî¥",
            TaskPriority.MEDIUM: "üü°", 
            TaskPriority.LOW: "üü¢"
        }
        
        for prioridade, tarefas in por_prioridade.items():
            if tarefas:
                cor = cores_prioridade[prioridade]
                icon = icons_prioridade[prioridade]
                console.print(f"\n[{cor}]üìå Prioridade {prioridade.value.upper()} ({len(tarefas)} tarefas)[/{cor}]")
                
                for i, tarefa in enumerate(tarefas[:5], 1):  # Mostrar apenas 5 por prioridade
                    console.print(f"  {icon} {i}. {tarefa.title}")
                
                if len(tarefas) > 5:
                    console.print(f"     ... e mais {len(tarefas)-5} tarefas")
    
    def mostrar_resumo_final(self):
        """Mostrar resumo da sess√£o"""
        console.print("\n[bold cyan]üéØ Resumo da Sua Sess√£o WasTask[/bold cyan]")
        
        # Estat√≠sticas
        total_tarefas = len(self.tarefas)
        total_projetos = len(self.projetos)
        
        # Tabela de resumo
        resumo = Table(title="üìà Estat√≠sticas da Sess√£o")
        resumo.add_column("M√©trica", style="cyan")
        resumo.add_column("Valor", style="bold green")
        resumo.add_column("Detalhes", style="dim")
        
        resumo.add_row("Projetos criados", str(total_projetos), "Prontos para desenvolvimento")
        resumo.add_row("Tarefas geradas", str(total_tarefas), "Organizadas por prioridade")
        resumo.add_row("Tempo estimado", "25 dias", "Baseado em an√°lise IA")
        resumo.add_row("Status", "‚úÖ Completo", "Sistema funcionando perfeitamente")
        
        console.print(resumo)
        
        if self.projetos:
            projeto = self.projetos[0]
            console.print(f"\nüèÜ [bold green]Projeto '{projeto.name}' est√° pronto![/bold green]")
            console.print(f"üìã Criado: {total_tarefas} tarefas organizadas")
            console.print(f"üéØ Objetivo: {projeto.description}")
        
        console.print(f"\n[bold yellow]üéâ Parab√©ns! Voc√™ testou o WasTask com sucesso![/bold yellow]")
        console.print("\n[cyan]üí° Pr√≥ximos passos que voc√™ pode fazer:[/cyan]")
        console.print("  ‚Ä¢ Explorar c√≥digo: [dim]cat core/models.py[/dim]")
        console.print("  ‚Ä¢ Teste completo: [dim]uv run python demo_wastask.py[/dim]")
        console.print("  ‚Ä¢ Ver comandos: [dim]make help[/dim]")
        console.print("  ‚Ä¢ Criar suas pr√≥prias funcionalidades!")
    
    async def executar_demo_completo(self):
        """Executar demo interativo completo"""
        try:
            self.mostrar_banner()
            
            # 1. Criar projeto
            projeto = self.criar_projeto_interativo()
            
            # 2. Menu de op√ß√µes
            console.print(f"\n[yellow]üéØ O que voc√™ quer fazer com '{projeto.name}'?[/yellow]")
            
            opcoes = {
                "1": "üí¨ Conversar com IA sobre estrat√©gia",
                "2": "üìä Gerar plano de projeto autom√°tico", 
                "3": "‚ö° Criar tarefas inteligentemente",
                "4": "üé™ Experi√™ncia completa (tudo acima)",
                "5": "üìã Ver apenas o que foi criado"
            }
            
            for key, desc in opcoes.items():
                console.print(f"  {key}. {desc}")
            
            escolha = Prompt.ask("\nü§î Sua escolha", choices=list(opcoes.keys()), default="4")
            
            # Executar a√ß√µes baseadas na escolha
            if escolha in ["1", "4"]:
                await self.conversar_com_ia(projeto)
            
            if escolha in ["2", "4"]:
                self.criar_plano_basico(projeto)
            
            if escolha in ["3", "4"]:
                self.criar_tarefas_automaticas(projeto)
                self.mostrar_tarefas_detalhadas(projeto)
            
            # Oferecer continuar
            if escolha != "5" and Confirm.ask("\nüîÑ Quer explorar mais alguma funcionalidade?"):
                if Confirm.ask("üí≠ Fazer outra pergunta para a IA?"):
                    await self.conversar_com_ia(projeto)
                
                if Confirm.ask("üìä Ver tarefas organizadas?"):
                    self.mostrar_tarefas_detalhadas(projeto)
            
            self.mostrar_resumo_final()
            
        except KeyboardInterrupt:
            console.print("\n\nüëã Demo encerrado. Obrigado por testar o WasTask!")
        except Exception as e:
            console.print(f"\n‚ùå Oops! Erro: {e}")
            console.print("Mas relaxa, o WasTask est√° funcionando! üòÑ")


async def main():
    """Fun√ß√£o principal do demo"""
    demo = WasTaskDemoSimples()
    await demo.executar_demo_completo()


if __name__ == '__main__':
    console.print("[dim]Iniciando WasTask Demo...[/dim]")
    asyncio.run(main())